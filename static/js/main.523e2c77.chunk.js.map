{"version":3,"sources":["components/headerBars/index.js","components/employeerow/index.js","utils/API.js","components/searchbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","header","handleSort","useState","order","setOrder","key","name","className","id","onClick","Employee","employees","tableHeaders","map","employee","value","src","picture","medium","alt","first","last","cell","email","axios","get","Search","state","search","results","filteredResults","getUsers","API","then","res","setState","data","updateResults","event","filterSearch","filteredList","filter","item","Object","values","join","toLowerCase","indexOf","handleInputChange","target","sort","a","b","localeCompare","reverse","this","type","placeholder","aria-label","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.523e2c77.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction Header({ header, handleSort }) {\n\tconst [order, setOrder] = useState('down');\n\n\tconst handleOrder = () => {\n\t\thandleSort(order, header.name);\n\t\tif (order === 'down') {\n\t\t\tsetOrder('up');\n\t\t\treturn;\n\t\t}\n\t\tsetOrder('down');\n\n\t\treturn;\n\t};\n\n\treturn (\n\t\t<th key={header.name} className=\"header\">\n\t\t\t{header.name}\n\t\t\t<i\n\t\t\t\tclassName={`fa fa-caret-${order}`}\n\t\t\t\tid={`header${header.name}`}\n\t\t\t\tonClick={() => handleOrder()}\n\t\t\t></i>\n\t\t</th>\n\t);\n}\n\nexport default Header;\n","import React from 'react';\nimport Header from '../headerBars';\n\nfunction Employee({ employees, tableHeaders, handleSort }) {\n\treturn (\n\t\t<table className=\"table table-striped mt-0\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t{tableHeaders.map((header) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Header\n\t\t\t\t\t\t\t\tkey={header.name}\n\t\t\t\t\t\t\t\theader={header}\n\t\t\t\t\t\t\t\thandleSort={handleSort}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{employees.map((employee) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr key={employee.id.value}>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<img src={employee.picture.medium} alt={employee.name.first} />\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>{employee.name.first}</td>\n\t\t\t\t\t\t\t<td>{employee.name.last}</td>\n\t\t\t\t\t\t\t<td>{employee.cell}</td>\n\t\t\t\t\t\t\t<td>{employee.email}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n\nexport default Employee;\n","import axios from 'axios';\n\nconst URL = 'https://randomuser.me/api/?results=20&nat=us';\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n\tsearch: function () {\n\t\treturn axios.get(URL);\n\t},\n};\n","import React, { Component } from 'react';\nimport EmployeeRow from '../employeerow';\nimport API from '../../utils/API';\n\nclass Search extends Component {\n\tstate = {\n\t\tsearch: '',\n\t\tresults: [],\n\t\tfilteredResults: [],\n\t};\n\n\ttableHeaders = [\n\t\t{ name: 'Image' },\n\t\t{ name: 'First Name' },\n\t\t{ name: 'Last Name' },\n\t\t{ name: 'Phone Number' },\n\t\t{ name: 'E-mail' },\n\t];\n\n\tcomponentDidMount() {\n\t\tthis.getUsers();\n\t}\n\n\tgetUsers = () => {\n\t\tAPI.search().then((res) => {\n\t\t\tthis.setState({\n\t\t\t\tresults: res.data.results,\n\t\t\t\tfilteredResults: res.data.results,\n\t\t\t});\n\t\t});\n\t};\n\n\tupdateResults = (event) => {\n\t\tconst filterSearch = this.state.search;\n\t\tconst filteredList = this.state.results.filter((item) => {\n\t\t\tlet values = Object.values(item).join('').toLowerCase();\n\t\t\treturn values.indexOf(filterSearch.toLowerCase()) !== -1;\n\t\t});\n\t\t// const filteredList = this.state.results.filter((item) =>\n\t\t// \titem.match(filterSearch)\n\t\t// );\n\t\tthis.setState({ filteredResults: filteredList });\n\t};\n\n\thandleInputChange = (event) => {\n\t\tconst name = event.target.name;\n\t\tconst value = event.target.value;\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t});\n\t\tthis.updateResults();\n\t};\n\n\thandleSort = (order, name) => {\n\t\tswitch (name) {\n\t\t\t// case 'Image':\n\t\t\t// \t//sort\n\t\t\t// \tbreak;\n\t\t\tcase 'First Name':\n\t\t\t\tif (order === 'down') {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.sort((a, b) =>\n\t\t\t\t\t\t\ta.name.first.localeCompare(b.name.first)\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.reverse(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Last Name':\n\t\t\t\tif (order === 'down') {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.sort((a, b) =>\n\t\t\t\t\t\t\ta.name.last.localeCompare(b.name.last)\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.reverse(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Phone Number':\n\t\t\t\tif (order === 'down') {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.sort((a, b) =>\n\t\t\t\t\t\t\ta.cell.localeCompare(b.cell)\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.reverse(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'E-mail':\n\t\t\t\tif (order === 'down') {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.sort((a, b) =>\n\t\t\t\t\t\t\ta.email.localeCompare(b.email)\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tfilteredResults: this.state.filteredResults.reverse(),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"jumbotron mb-0\">\n\t\t\t\t\t<h1 className=\"display-4 mb-5 text-center\">EMPLOYEE DIRECTORY</h1>\n\t\t\t\t\t{/* <h2>{this.state.search}</h2> */}\n\t\t\t\t\t<form className=\"form-inline my-2 my-lg-0 justify-content-center\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tname=\"search\"\n\t\t\t\t\t\t\tvalue={this.state.search}\n\t\t\t\t\t\t\tclassName=\"form-control mr-sm-2\"\n\t\t\t\t\t\t\ttype=\"search\"\n\t\t\t\t\t\t\tplaceholder=\"Search\"\n\t\t\t\t\t\t\taria-label=\"Search\"\n\t\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<EmployeeRow\n\t\t\t\t\temployees={this.state.filteredResults}\n\t\t\t\t\ttableHeaders={this.tableHeaders}\n\t\t\t\t\thandleSort={this.handleSort}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Search;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/searchbar';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SearchBar />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}